/*
  Predictive GPS Lap Timer Test
  All Rights Reserved.
  James M. Eli
  3/30/2012
*/
//
//pelles c version
//
#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
 
#define FALSE                         0
#define TRUE                          1
 
#define MIN(x, y)                     (((x) < (y)) ? (x) : (y))
#define MAX(x, y)                     (((x) > (y)) ? (x) : (y))
#define DEGTORAD(deg)                 (deg*57.29577995)
 
#define MAX_TIME                      1500 //(5*60*5) 5Hz*60seconds*5minutes
#define GPS_STRING_LENGTH             96   //maximum possible characters in a GPS string (+ fudge)
 
#define PREFIX_MODE                   0x01
#define PRESTART_MODE                 0x02
#define RUNNING_MODE                  0x04
#define STOPPED_MODE                  0x08
#define LATITUDE                      0x01
#define LONGITUDE                     0x02
 
//gps rmc sentence fields
#define RMC_PREFIX                    0
#define RMC_TIME                      1
#define RMC_STATUS                    2
#define RMC_LATITUDE                  3
#define RMC_LATITUDE_PREFIX           4
#define RMC_LONGITUDE                 5
#define RMC_LONGITUDE_PREFIX          6
#define RMC_SPEED                     7
#define RMC_TRACK                     8
#define RMC_DATE                      9
#define RMC_MAGNETIC_VARIATION        10
#define RMC_MAGNETIC_VARIATION_PREFIX 11
#define RMC_FAA_MODE_INDICATOR        12
#define RMC_CHECKSUM                  13
//number of fields in gps rmc string
#define RMC_FIELDS                    (RMC_CHECKSUM + 1)
 
static const float LINE_WIDTH = 50.0f;
static const float LINE_WIDTH_2 = 25.0f;
static const float PROJECTION_DISTANCE = 100.0f;
 
typedef struct speed_ {
  unsigned long total;
  unsigned short *pSpeed;
} speed;
speed current, best;
 
typedef struct point_ {
  long x, y;
} point;
 
typedef struct line_ {
  point p1, p2;
} line;
 
//arrays of current/best lap instanteous velocities 
unsigned short speed_array_1[MAX_TIME];
unsigned short speed_array_2[MAX_TIME];
//best lap total speed
float best_average;
//coordinates of start/finish location
point start;
//startline endpoints
line sf;
//heading crossing start/finish
short start_heading;
//mode of operation: PREFIX, PRESTART, RUN, STOP
unsigned char mode;
 
//File name (Path)
const char *filePath = "sussargues.txt";
FILE *file = NULL;
 
//construct a startline
void StartLine(float sx, float sy, float shdg) {
  float tx, ty; //projected track coordinates
  float m, b;   //slope & y intercept
     
  //project racetrack along current heading
  tx = sx + PROJECTION_DISTANCE*cos(DEGTORAD(shdg));
  ty = sy + PROJECTION_DISTANCE*sin(DEGTORAD(shdg));
  //projected racetrack slope & y-intercept 
  m = (sy - ty)/(sx - tx);
  b = sy - (m*sx);
 
  //construct perpendicular (startline) slope & y-intercept
  m = -1.0/m;
  b = sy - (m*sx);
 
  //define endpoints of the perpendicular
  tx = sx + LINE_WIDTH_2; //note" tx re-used as a temporary value here
  sf.p1.y = (long)(m*tx + b);
  sf.p1.x = (long)tx;
  tx -= LINE_WIDTH;
  sf.p2.y = (long)(m*tx + b);
  sf.p2.x = (long)tx;
}
 
//2d line intersection
unsigned char LineIntersection(line track) {
  long z;
  int s1, s2, s3, s4;
 
  //quick rejection test
  if (!(MAX(sf.p1.x, sf.p2.x) >= MIN(track.p1.x, track.p2.x) && MAX(track.p1.x, track.p2.x) >= MIN(sf.p1.x, sf.p2.x) && 
        MAX(sf.p1.y, sf.p2.y) >= MIN(track.p1.y, track.p2.y) && MAX(track.p1.y, track.p2.y) >= MIN(sf.p1.y, sf.p2.y))) {
    return FALSE;
  }
  //straddle tests
  if ((z = ((track.p1.x - sf.p1.x)*(sf.p2.y - sf.p1.y)) - ((track.p1.y - sf.p1.y)*(sf.p2.x - sf.p1.x))) < 0)
    s1 = -1; //counterclockwise
  else if (z > 0)
    s1 = 1;  //clockwise
  else
    s1 = 0;  //collinear
   
  if ((z = ((track.p2.x - sf.p1.x)*(sf.p2.y - sf.p1.y)) - ((track.p2.y - sf.p1.y)*(sf.p2.x - sf.p1.x))) < 0)
    s2 = -1;
  else if (z > 0)
    s2 = 1;
  else
    s2 = 0;
   
  if ((z = ((sf.p1.x - track.p1.x)*(track.p2.y - track.p1.y)) - ((sf.p1.y - track.p1.y)*(track.p2.x - track.p1.x))) < 0)
    s3 = -1;
  else if (z > 0)
    s3 = 1;
  else
    s3 = 0;
   
  if ((z = ((sf.p2.x - track.p1.x)*(track.p2.y - track.p1.y)) - ((sf.p2.y - track.p1.y)*(track.p2.x - track.p1.x))) < 0)
    s4 = -1;
  else if (z > 0)
    s4 = 1;
  else
    s4 = 0;
   
  if ((s1*s2 <= 0) && (s3*s4 <= 0))
    return TRUE;
  //line segments do not intersect
  return FALSE;
}
 
//parse gps csv string
int ParseRMC(char *line, char *strings[]) {
  char *p;
  unsigned char n, size = RMC_FIELDS;
 
  p = line;
  n = 0;
  //printf("line: %s\n",line);
  for ( ; ; ) {
    //ditch leading commas
    while (*p == ',')
      p++;
    //nothing of use
    if (*p == '\0')
      return n;
    //save the string
    strings[n++] = p;
    //find the next field
    while (*p != ',' && *p != '\0')
      p++;
    //nothing else of use or too many fields
    if (*p == '\0' || n >= size)
      return n;
    //split the field
    *p++ = '\0';
  }
}
 
void CopyNoDecimal(char *s, char *d) {
    while (*s != '.')
        *d++ = *s++;    //copy up to decimal point
    *d++ = *++s;        //copy 1 digit past decimal
    *d = '\0';          //terminate string
}
 
void GeoCopy(char *s, char *d, unsigned char value) {
    int i;
 
    i = 0;
    if (value == LONGITUDE)  {
        //skip first numeral
        //i++;
        s++;
    }
    
    //copy all numerals, skipping negative sign/decimal point
    do {
        if ((*s >= '0') && (*s <= '9')) {
            *d++ = *s;
            i++;
        }
    } while (*s++ != '\0');
    //pad end with zeros
    
    if (i <= 7)
        while (i++ <= 7)
           *d++ = '0';
    //truncate last numeral and null terminate
    *--d = '\0';
}
 
void Run(void) {
    //string space for each gps rmc sentence/fields
    char GPSString[GPS_STRING_LENGTH];                          
    char *GPSTokens[RMC_FIELDS];
    //instantaneous GPS speed
    unsigned short gps_speed;
    //lap counters
    unsigned short lap, counter;
    //coordinates of current & previous GPS location
    line track;
    //current lap average speed
    float avgerage_speed;
 
    //init various stuff
    current.pSpeed = speed_array_1;
    best.pSpeed = speed_array_2;
    avgerage_speed = 0.0;
    best_average = 0.0;
    counter = 0;
    lap = 0;
 
    //
    //simulate setting startline
    //
    mode = RUNNING_MODE;
    //note maximum uint32_t value = 4294967295
    //start.x = 4559400;
    //start.y = 2269100;  //truncated
	//43.7111706,4.0025872,15z
	 start.x = 4342674;
	 start.y = 400680;
	printf("startx: %ld / stary: %ld", start.x, start.y);
    //heading while crossing start/finish
    start_heading = 290;
    //
    //end simulate setting startline
    //
 
    //define startline
    StartLine((float)start.x, (float)start.y, (float)start_heading);
    track.p1.x = start.x;
    track.p1.y = start.y;
 
	printf("start \n");
    //main gps string processing loop
    while (fgets(GPSString, GPS_STRING_LENGTH, file) != NULL) { //grab a gps string
        char s[12];
 
        if (mode != RUNNING_MODE)
            return;
 
        //parse gps string
        ParseRMC(GPSString, GPSTokens);
        
 
        //gps instantaneous velocity
        CopyNoDecimal(GPSTokens[RMC_SPEED], s);
        //converted to integer*10
        gps_speed = atoi(s);
        //stationary?
        if (gps_speed < 20) {
            printf("mode: STOP speed <20\n");
            mode = STOPPED_MODE;
            break;
        }
 
        //save instaneous velocity of current lap
        *(current.pSpeed + counter) = gps_speed;
        //running total of lap speed
        current.total += gps_speed;
        //running total of fastest lap speed
        best.total += *(best.pSpeed + counter);
 
        //current lap average speed
        avgerage_speed = (float)current.total/(counter + 1);
 
        //x position
        GeoCopy(GPSTokens[RMC_LATITUDE], s, LATITUDE);
        track.p2.x = atol(s);
		//printf("lat : %ld / ", atol(s));
        //y position
        GeoCopy(GPSTokens[RMC_LONGITUDE], s, LONGITUDE);
		//printf("long: %ld\n", atol(s));
        track.p2.y = atol(s);
 
        long heading;
        heading = atol(GPSTokens[RMC_TRACK]);

 
        //heading sanity check
        if ( (counter > 3) && (abs(start_heading - heading) < 30) ) {
             
            //crossed start/finish line?
            if (LineIntersection(track)) {
 
                //we crossed the start/finish line, first lap?
                if (lap > 0) {
                    printf("%2d: (%d) %3.1f %3.1f", lap, counter, avgerage_speed/10, best_average/10);
     
                    if (avgerage_speed > best_average) {
                        //a new fast lap
                        printf(" <New Fast Lap\n");
                        best_average = avgerage_speed;
                        //swap speed arrays
                        if (current.pSpeed == speed_array_1) {
                            current.pSpeed = speed_array_2;
                            best.pSpeed = speed_array_1;
                        } else {
                            current.pSpeed = speed_array_1;
                            best.pSpeed = speed_array_2;
                        }
                    } else
                        putchar('\n');
                }
 
                //reset and await next gps udate
                current.total = 0;
                best.total = 0;
                lap++;
                counter = 0;
            }
        }
 
        //
        //display lap time prediction hereâ€¦
        //
 
        //prepare for next iteration
        track.p1.x = track.p2.x;
        track.p1.y = track.p2.y;
        //increment gps sentence counter
        counter++;
        //exceeding array size?
        if (counter >= MAX_TIME) {
            printf("mode: STOP Exceeded MAX_TIME\n");
            mode = STOPPED_MODE;
            counter = 0;
            current.total = 0;
            best.total = 0;
        }
    }
}
 
 
int main(void) {
  file = fopen(filePath, "r");
  if ( !file ) {
  //if (fopen_s(&file, filePath, "r")) {      //attempt to open gps data file
    printf("Error opening file.\n");
    return 0;
  }
 
  printf("Waiting for keypress.\n");
  while (1)
    if (getchar())
      break;
  Run();
 
  fclose(file);
  printf("end\n");
  //getchar();        //wait before closing...
  return 0;
}